package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"time"
)

const (
	LOGIN_API               = "https://api.scaleway.com/account/v2/login"
	ACCOUNT_USERS_API       = "https://api.scaleway.com/account/v2/users/"
	IAM_USERS_API           = "https://api.scaleway.com/iam/v1alpha1/users/"
	SWITCH_ORGANIZATION_API = "https://api.scaleway.com/iam-private/v1/jwts/%s/switch-organization"
	API_KEYS_API            = "https://api.scaleway.com/iam/v1alpha1/api-keys"
	CONTENT_TYPE            = "Content-Type"
	APPLICATION_JSON        = "application/json"
	X_SESSION_TOKEN         = "X-Session-Token"
)

type ScalewayClient struct {
	httpClient            http.Client
	organizationToJwt     map[string]string
	organizationToUserId  map[string]string
	defaultOrganizationId string
	jti                   string
	issuer                string
}

type ApiKey struct {
	AccessKey string `json:"access_key"`
	SecretKey string `json:"secret_key"`
}

type PostBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Token    string `json:"otp"`
}

func NewScalewayClient(email, password, token string) (*ScalewayClient, error) {
	client := ScalewayClient{
		httpClient:           http.Client{},
		organizationToJwt:    make(map[string]string),
		organizationToUserId: make(map[string]string),
	}

	postBody := PostBody{
		Email:    email,
		Password: password,
		Token:    token,
	}
	jsonBody, err := json.Marshal(postBody)
	if err != nil {
		return nil, err
	}

	jsonResponse, err := client.sendRequest(LOGIN_API, jsonBody, "", "POST")
	if err != nil {
		return nil, err
	}

	client.jti = jsonResponse["jwt"].(map[string]interface{})["jti"].(string)
	client.issuer = jsonResponse["jwt"].(map[string]interface{})["issuer_id"].(string)

	jwt := jsonResponse["token"].(string)

	jsonResponse, err = client.sendRequest(IAM_USERS_API+client.issuer, nil, jwt, "GET")
	if err != nil {
		return nil, err
	}
	client.defaultOrganizationId = jsonResponse["organization_id"].(string)
	client.organizationToJwt[client.defaultOrganizationId] = jwt
	client.organizationToUserId[client.defaultOrganizationId] = client.issuer

	return &client, nil
}

func (client *ScalewayClient) ListOrganizations() (map[string]string, error) {
	jsonResponse, err := client.sendRequest(IAM_USERS_API+client.issuer, nil, client.getOrCreateOrganizationJwt(client.defaultOrganizationId), "GET")
	if err != nil {
		return nil, err
	}
	accountRootUserId := jsonResponse["account_root_user_id"].(string)

	jsonResponse, err = client.sendRequest(ACCOUNT_USERS_API+accountRootUserId, nil, client.getOrCreateOrganizationJwt(client.defaultOrganizationId), "GET")
	if err != nil {
		return nil, err
	}
	orgs := jsonResponse["organizations"].([]interface{})
	result := make(map[string]string)
	for _, org := range orgs {
		orgMap := org.(map[string]interface{})
		result[orgMap["name"].(string)] = orgMap["id"].(string)
	}

	return result, nil
}

func (sc *ScalewayClient) CreateAPIKey(organizationId string, duration time.Duration) (*ApiKey, error) {
	jsonBody, _ := json.Marshal(map[string]string{
		"default_project_id": organizationId,
		"description":        "generated by scw-2fa-init",
		"user_id":            sc.getOrCreateOrganizationUserId(organizationId),
		"expiresAt":          time.Now().Add(duration).UTC().Format(time.RFC3339),
	})

	jsonResponse, err := sc.sendRequest(API_KEYS_API, jsonBody, sc.getOrCreateOrganizationJwt(organizationId), http.MethodPost)
	if err != nil {
		return nil, err
	}

	accessKey := jsonResponse["access_key"].(string)
	secretKey := jsonResponse["secret_key"].(string)

	return &ApiKey{AccessKey: accessKey, SecretKey: secretKey}, nil
}

func (client *ScalewayClient) getOrCreateOrganizationUserId(organizationId string) string {
	userId, ok := client.organizationToUserId[organizationId]
	if !ok {
		client.completeOrganizationData(organizationId)
	}
	userId, _ = client.organizationToUserId[organizationId]
	return userId
}

func (client *ScalewayClient) completeOrganizationData(organizationId string) {
	jsonBody, _ := json.Marshal(map[string]string{
		"organization_id": organizationId,
	})

	jsonResponse, err := client.sendRequest(fmt.Sprintf(SWITCH_ORGANIZATION_API, client.jti), jsonBody, client.getOrCreateOrganizationJwt(client.defaultOrganizationId), "POST")
	if err != nil {
		fmt.Println(err)
		return
	}
	client.organizationToUserId[organizationId] = jsonResponse["user_id"].(string)
	client.organizationToJwt[organizationId] = jsonResponse["token"].(string)
}

func (client *ScalewayClient) sendRequest(url string, body []byte, jwt string, method string) (map[string]interface{}, error) {
	req, err := http.NewRequest(method, url, bytes.NewBuffer(body))
	if err != nil {
		return nil, err
	}

	req.Header.Set(CONTENT_TYPE, APPLICATION_JSON)
	if jwt != "" {
		req.Header.Set(X_SESSION_TOKEN, jwt)
	}

	response, err := client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	responseBody, _ := ioutil.ReadAll(response.Body)

	if response.StatusCode >= 400 {
		return nil, errors.New("Request failed with status code: " + strconv.Itoa(response.StatusCode) + "\n" + string(responseBody))
	}

	var jsonResponse map[string]interface{}
	json.Unmarshal(responseBody, &jsonResponse)

	return jsonResponse, nil
}

func (client *ScalewayClient) getOrCreateOrganizationJwt(organizationId string) string {
	jwt, ok := client.organizationToJwt[organizationId]
	if !ok {
		client.completeOrganizationData(organizationId)
	}
	jwt, _ = client.organizationToJwt[organizationId]
	return jwt
}
